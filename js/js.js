// Ванильный Java Script
var js1 = {
	
};

// Работа с DOM
var js2 = {
	"<h1>Навигация по DOM-элементов</h1>":"<h4>div.parentNode</h4><p>обращение к родительскому узлу.</p><h4>div.previousSibling</h4><p>обращение к предыдущему узлу.</p><h4>div.nextSibling</h4><p>обращение к следующему узлу.</p><h4>div.firstChild</h4><p>первый дочерний элемент.</p><h4>div.childNodes</h4><p>коллекция, хранящая все дочерние элементы, включая текстовые (псевдомассив).</p><h4>div.lastChild</h4><p>последний дочерний элемент.</p>",
  "<h1>Навигация по элементам</h1>":"<h4>div.parentElement</h4><p>обращение к родительскому элементу.</p><h4>div.previousElementSibling</h4><p>обращение к предыдущему элементу.</p><h4>div.nextElementSibling</h4><p>обращение к следующему элементу.</p><h4>div.firstElementChild</h4><p>первый дочерний элемент.</p><h4>div.children[]</h4><p>коллекция, хранящая только дочерние узлы-элементы.</p><h4>div.lastElementChild</h4><p>последний дочерний элемент.</p>",
  "<h1>Поиск элемента по ID</h1>":"<h4>document.getElementById('id')</h4><p>Если элементу назначен специальный атрибут id, то можно получить его прямо по переменной с именем из значения id.</p>",
  "<h1>Поиск элемента по Тегу</h1>":"<h4>elem.getElementsByTagName('tag')</h4><p>Метод ищет все элементы с заданным тегом внутри элемента и возвращает их в виде списка. Регистр тега не имеет значения.</p>",
  "<h1>Поиск элемента по Имени</h1>":"<h4>document.getElementsByName('name')</h4><p>Метод ищет все элементы, атрибут name которых будет совпадает с переданным в метод.</p>",
  "<h1>Поиск элемента по Классу</h1>":"<h4>elem.getElementsByClassName('class')</h4><p>Метод ищет все элементы, класс которых совпадает с переданным в метод.</p>",
  "<h1>Поиск элемента по Селектору</h1>":"<h4>elem.querySelector('selector')</h4><p>Метод возвращает самый первый элемент внутри elem, удовлетворяющий CSS-селектору, переданному в метод.</p>",
  "<h1>Множественный поиск элемента по селектору</h1>":"<h4>elem.querySelectorAll('selector')</h4><p>Метод возвращает все элементы внутри elem, удовлетворяющие CSS-селектору, переданному в метод.</p>",
  "<h1>Проверка элемента на селектор</h1>":"<h4>elem.matches</h4><p>Данный метод ничего не ищет, а проверяет, удовлетворяет ли elem селектору css. Он возвращает true либо false. Используется для фильтрации выборки элементов.</p>",
  "<h1>Поиск элемента вверх</h1>":"<h4>elem.closest</h4><p>Данный метод ищет ближайший элемент выше по иерархии DOM, подходящий под CSS-селектор.</p>",
  "<h1>Свойства DOM-узлов </h1>":"<h4>nodeName</h4><p>возвращает название тега (название узла)</p><h4>tagName</h4><p>возвращает название тега (название тега)</p><h4>innerHTML</h4><p>позволяет получить или установить содержимое элемента в виде строки (HTML-код)</p><h5>Тонкости работы innerHTML</h5><p>innerHTML += перезапишет содержимое, а не добавит дополнительное</p>	<p>innerHTML в IE9 (для таблиц) только для чтения</p>	<p>script вставленный с помощью innerHTML выполнен не будет</p><h4>outerHTML</h4><p>содержит HTML элемента целиком, не поддаётся изменению</p><h4>nodeValue/data</h4><p>содержимое текстового узла и комментариев, доступно на запись через data</p><h4>textContent</h4><p>содержит лишь текст внутри элемента, за вычетом всех <тегов></p><h4>hidden</h4><p>технически работает как атрибут style='display: none;'', но записывается короче и удобнее</p><h5>Исследование элементов</h5><p>	value - значение для INPUT, SELECT, TEXTAREA</p><p>	id - идентификатор</p><p>	href - адрес ссылки</p><p>	другие...</p>",
  "<h1>Работа с атрибутами элемента</h1>":"<h4>elem.hasAttribute(name);</h4><p>проверяет наличие атрибута</p><h4>elem.getAttribute(name);</h4><p>получает значение атрибута</p><h4>elem.setAttribute(name, value);</h4><p>устанавливает атрибут</p><h4>elem.removeAttribute(name);</h4><p>удаляет атрибут</p><h5>Особенности атрибутов:</h5><p>	Всегда являются строками</p><p>	Их имя нечувствительно к регистру</p><p>	Видны в innerHTML (за исключением старых IE)</p>",
  "<h1>Работа с классами элемента</h1>":"<h4>elem.classList.contains('class');</h4><p>возвращает true/false, в зависимости от того, есть ли у элемента класс 'class'.</p><h4>elem.classList.add/remove('class');</h4><p>добавляет/удаляет класс 'class'.</p><h4>elem.classList.toggle('class');</h4><p>если класса 'class' нет, добавляет его, если есть - удаляет.</p><h4>parent.contains('child');</h4><p>возвращает true, если child потомок parent, иначе false</p>",
  "<h1>Проверка на порядок вложенности</h1>":"<h4>nodeA.compareDocumentPosition(nodeB);</h4><p>возвращает битовую маску</p><h5>Битовая маска:</h5><p>Биты / Число / Значение</p><p>000000 / 0 / nodeA и nodeB - один и тот же узел</p><p>000001 / 1 / Узлы в разных документах (или один из них не в документе)</p><p>000010 / 2 / nodeB предшествует nodeA (в порядке обхода документа)</p><p>000100 / 4 / nodeA предшествует nodeB</p><p>001000 / 8 / nodeB содержит nodeA</p><p>010000 / 16 / nodeA содержит nodeB</p><p>100000 / 32 / Зарезервировано для браузера</p>",
  "<h1>Стандартная работа с узлами</h1>":"<h3>Создание элемента	</h3><h4>document.createElement(tag);</h4><p>создаёт новый элемент с указанным тегом</p><h4>document.createTextNode(text);</h4><p>создаёт текстовый узел</p><h3>Добавление эдемента в DOM</h3><h4>parentElem.appendChild(elem);</h4><p>добавляет elem в конец дочерних элементов parentElem</p><h4>parentElem.insertBefore(elem, nextSibling);</h4><p>добавляет elem перед nextSibling в parentElem</p><h3>Клонирование узлов</h3><h4>elem.cloneNode(true);</h4><p>вернёт глубокую копию элемента</p><h4>elem.cloneNode(false);</h4><p>вернёт копию без детей</p><h3>Удаление узлов</h3><h4>parentElem.removeChild(elem);</h4><p>удаляет elem из списка детей parentElem</p><h4>parentElem.replaceChild(newElem, elem);</h4><p>заменяет elem на newElem в списке детей parentElem</p>",
  "<h1>Мультивставка DOM-узлов</h1>":"<h4>elem.insertAdjacentHTML(where, html);</h4><p>вставляет произвольный html в любое место документа, в том числе и между узлами.</p><p>li.../li (1) li (2)elem(3) /li (4) li.../li</p><p>1. beforeBegin - вставит код до обёртки элемента</p><p>2. afterBegin - вставит код вначале элемента</p><p>3. beforeEnd - вставит код в конце элемента</p><p>4. afterEnd - вставит код после обёртки элемента</p>",
  "<h1>Быстрая работа с узлами</h1>":"<h4>elem.append(...nodes);</h4><p>вставляет nodes в конец node</p><h4>elem.prepend(...nodes);</h4><p>вставляет nodes в начало node</p><h4>elem.after(...nodes);</h4><p>вставляет nodes после узла node</p><h4>elem.before(...nodes);</h4><p>вставляет nodes перед узлом node</p><h4>elem.replaceWith(...nodes);</h4><p>вставляет nodes вместо node</p>",
  "<h1>Вписание строки в DOM на момент загрузки страницы</h1>":"<h4>document.write(str);</h4><p>вписывает строку в документ при загрузке HTML-страницы</p><h4>document.writeln(str);</h4><p>вписывает строку с переносом строки</p>",
  "<h1>Работа со стилями элементов</h1>":"<h4>Свойство style</h4><p>Свойство element.style возвращает объект, дающий доступ к стилю элемента на чтение и запись.</p><p>Единицы измерения ОБЯЗАТЕЛЬНЫ в style</p><p>Многословные свойства записываются без пробелов в верблюжьем регистре (CamelCase).</p>	<h5>style.width = '';</h5><p>Cтиль сбрасывается и берёт свои параметры из CSS.</p><h5>Префиксы:</h5><p>elem.style.MozBorderRadius = '5px';</p><p>elem.style.WebkitBorderRadius = '5px';</p><h4>Строка стилей style.cssText</h4><p>Свойство style является специальным объектом, ему нельзя присваивать строку, а вот свойство style.cssText позволяет поставить стиль целиком в виде строки.</p><h4>Получение текущего используемого значения свойства</h4><h5>window.getComputedStyle(elem[, pseudo]).</h5><p>elem - элемент, значение для которого нужно получить.</p><p>pseudo - указывается, если требуется стиль псевдо-элемента, например ::before, :hover.</p>",
  "<h1>Размеры и прокрутка элемента</h1>":"<h4>offsetParent</h4><p>находится ссылка на родительский элемент по позиционированию.</p><h4>offsetTop</h4><p>отступ от родителя по позиционированию сверху.</p><h4>offsetLeft</h4><p>отступ от родителя по позиционированию слева.</p><h4>offsetHeight</h4><p>внешняя высота элемента.</p><h4>offsetWidth</h4><p>внешняя ширина элемента.</p><h4>clientTop</h4><p>высота рамки.</p><h4>clientLeft</h4><p>ширина рамки.</p><h4>clientHeight</h4><p>внутренняя высота элемента без полосы прокрутки.</p><h4>clientWidth</h4><p>внутренняя ширина элемента без полосы прокрутки.</p><h4>scrollTop</h4><p>высота прокрученной области (от внутренней высоты).</p><h4>scrollLeft</h4><p>ширина прокрученной области (от внутренней ширины).</p><h4>scrollHeight</h4><p>внутренняя высота элемента с учётом полосы прокрутки.</p><h4>scrollWidth</h4><p>внутренняя ширина элемента с учётом полосы прокрутки.</p>",
  "<h1>Размеры и прокрутка страницы</h1>":"<h3>Ширина и высота видимой части окна</h3><p>Свойства clientHeight/Width - для элемента document.documentElement - это как раз высота/ширина видимой области окна.</p><p>window.innerWidth/Height - вся ширина/высота окна с полосой прокрутки.</p><h4>Получение текущей прокрутки</h4><p>Текущую прокрутку страницы можно получить запросом к documentElement.scrollLeft/Top или document.body.</p><h4>Методы для прокрутки </h4><h5>scrollBy(x,y)</h5><p>прокручивает страницу относительно текущих координат.</p><h5>scrollTo(pageX,pageY)</h5><p>прокручивает страницу к указанным координатам относительно документа.</p><h5>elem.scrollIntoView(top)</h5><p>вызывается на элементе и прокручивает страницу так, чтобы элемент оказался вверху, если параметр top равен true, и внизу, если top равен false.</p>",
  "<h1>Координаты в окне</h1>":"<p>Координатная система относительно окна браузера начинается в левом‑верхнем углу текущей видимой области окна.</p><h4>elem.getBoundingClientRect()</h4><p>возвращает координаты элемента, под которыми понимаются размеры 'воображаемого прямоугольника', который охватывает весь элемент.</p><p>top – Y‑координата верхней границы элемента</p><p>left – X‑координата левой границы</p><p>right – X‑координата правой границы</p><p>bottom – Y‑координата нижней границы</p><h4>document.elementFromPoint(x, y)</h4><p>возвращает элемент, находящийся на координатах (х, у) относительно окна (для координат вне окна метод возвратит null).</p>"
};

var js3 = {
	
};